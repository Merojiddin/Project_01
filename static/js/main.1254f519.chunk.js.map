{"version":3,"sources":["components/home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Api","Home","useState","query","setQuery","weather","setWeather","className","main","type","placeholder","onChange","e","target","value","onKeyPress","event","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","getTheDate","Date","temp","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sOAIMA,G,MACA,oCADAA,EAEC,0CAoEQC,EAjEF,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACXC,EADW,KACJC,EADI,OAEYF,mBAAS,IAFrB,mBAEXG,EAFW,KAEFC,EAFE,KA4Bf,OACI,yBAAKC,UACgB,oBAAhBF,EAAQG,MACdH,EAAQA,QAAQ,GAAGG,KAAO,SAAW,eACrC,eAAiB,kBAEZ,yBAAKD,UAAU,aACpB,yBAAKA,UAAU,QACd,2BAAOE,KAAK,OACXC,YAAY,YACZH,UAAU,QACVI,SAAY,SAAAC,GAAC,OAAIR,EAASQ,EAAEC,OAAOC,QACnCA,MAAOX,EACPY,WArCO,SAAAC,GACI,UAAdA,EAAMC,KACTC,MAAM,GAAD,OAAIlB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACxDmB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJhB,EAAWgB,GACXlB,EAAS,IACTmB,QAAQC,IAAIF,UAiCsB,oBAAhBjB,EAAQG,KACtB,6BACA,yBAAKD,UAAU,YACbF,EAAQoB,KADV,IACiBpB,EAAQqB,IAAIC,SAE7B,yBAAKpB,UAAU,QAjCF,SAACqB,GACrB,IAGMC,EAFO,CAAE,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAEhED,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEf,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAyBzBE,CAAW,IAAIC,OAEjB,yBAAK/B,UAAU,UACbF,EAAQG,KAAK+B,KAAK,kCADpB,KAGA,yBAAKhC,UAAU,aACbF,EAAQA,QAAQ,GAAGG,OAGlB,MCvDEgC,MARf,WACE,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,QCIckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.1254f519.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport './Home.scss'\r\n\r\nconst Api = {\r\n\tkey: \"523cc874aa96b2b2db0efe4737c9e5a7\",\r\n\tbase: \"http://api.openweathermap.org/data/2.5/\"\r\n}\r\n\r\nconst Home = () => {\r\n\tconst [query, setQuery] = useState('')\r\n\tconst [weather, setWeather] = useState({})\r\n\r\n\tconst search = event => {\r\n\t\tif (event.key === \"Enter\") {\r\n\t\t\tfetch(`${Api.base}weather?q=${query}&units=metric&APPID=${Api.key}`)\r\n\t\t\t\t.then(res => res.json())\r\n\t\t\t\t.then(result => {\r\n\t\t\t\t\t\tsetWeather(result);\r\n\t\t\t\t\t\tsetQuery('');\r\n\t\t\t\t\t\tconsole.log(result)\r\n\t\t\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n    const getTheDate = (d) => {\r\n\t\t\tconst Months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\t\t\tconst Days = [ \"Sunday\", 'Monday', \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\r\n\r\n\t\t\tconst day = Days[d.getDay()];\r\n\t\t\tconst date = d.getDate(); \r\n\t\t\tconst month = Months[d.getMonth()];\r\n\t\t\tconst year = d.getFullYear()\r\n\r\n\t\t\treturn `${day} ${date} ${month} ${year}`\r\n\t\t}\r\n    \r\n    return (\r\n        <div className={\r\n\t\t\t\t\t(typeof weather.main != \"undefined\") ? \r\n\t\t\t\t\t((weather.weather[0].main = \"clean\") ? 'wrapperClean'\r\n\t\t\t\t\t: 'wrapperRainy'): ' wrapperCloudy'\r\n\t\t\t\t}>\r\n            <div className=\"container\">\r\n\t\t\t\t\t\t\t<div className=\"root\">\r\n\t\t\t\t\t\t\t\t<input type=\"text\" \r\n\t\t\t\t\t\t\t\t\tplaceholder=\"Search...\" \r\n\t\t\t\t\t\t\t\t\tclassName=\"input\"\r\n\t\t\t\t\t\t\t\t\tonChange = {e => setQuery(e.target.value)}\r\n\t\t\t\t\t\t\t\t\tvalue={query}\r\n\t\t\t\t\t\t\t\t\tonKeyPress={search}\r\n\t\t\t\t\t\t\t\t></input>\r\n\t\t\t\t\t\t\t</div>\r\n               {(typeof weather.main != \"undefined\") ? (\r\n\t\t\t\t\t\t\t\t  <div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"location\">\r\n\t\t\t\t\t\t\t\t\t\t\t{weather.name} {weather.sys.country}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"data\">\r\n\t\t\t\t\t\t\t\t\t\t\t{getTheDate(new Date)}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"degree\">\r\n\t\t\t\t\t\t\t\t\t\t\t{weather.main.temp}<sup>o</sup>c\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"condition\">\r\n\t\t\t\t\t\t\t\t\t\t\t{weather.weather[0].main}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t ) : ('')}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Home;","import React from 'react';\nimport './App.css';\n\nimport Home from './components/home/Home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}